"""added User, Project

Revision ID: 4c1dd34395df
Revises: 964620746a86
Create Date: 2024-11-30 18:16:22.769512

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4c1dd34395df"
down_revision: Union[str, None] = "964620746a86"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project",
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("project_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "project_description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("project_id"),
    )
    op.create_table(
        "user",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.add_column("task", sa.Column("project", sa.Integer(), nullable=True))

    connection = op.get_bind()
    connection.execute(
        sa.sql.text(
            """
        INSERT INTO "user" (name) SELECT DISTINCT assignee FROM "task"
    """
        )
    )
    connection.execute(
        sa.sql.text(
            """
        UPDATE "task"
        SET assignee = u.user_id
        FROM (SELECT user_id, name FROM "user") AS u
        WHERE assignee = u.name
    """
        )
    )

    op.alter_column(
        "task",
        "assignee",
        existing_type=sa.VARCHAR(),
        type_=sa.Integer(),
        existing_nullable=False,
        postgresql_using="assignee::integer",
    )
    op.create_foreign_key(None, "task", "project", ["project"], ["project_id"])
    op.create_foreign_key(None, "task", "user", ["assignee"], ["user_id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "task", type_="foreignkey")
    op.drop_constraint(None, "task", type_="foreignkey")
    op.alter_column(
        "task",
        "assignee",
        existing_type=sa.Integer(),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_column("task", "project")
    op.drop_table("user")
    op.drop_table("project")
    # ### end Alembic commands ###
